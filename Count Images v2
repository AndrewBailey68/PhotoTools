import os
import tkinter as tk
from concurrent.futures import ThreadPoolExecutor
import queue
import threading
import time

Starttime = time.time()

max_threads = 4  # Set the maximum number of threads
thread_pool = ThreadPoolExecutor(max_threads)

# Globals
directory_path_Q = queue.Queue()  # global to contain temp list

image_directory_list = []  # list to hold directories with images
image_data_cache = []

image_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.cr2', '.raw']
cv2_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp']
raw_extensions = ['.cr2', '.raw']
# ===============================================
# Preprocess the image extensions to lowercase and convert them into a set for faster membership checking
image_extensions_set = {ext.lower() for ext in image_extensions}
cv2_extensions_set = {ext.lower() for ext in cv2_extensions}
raw_extension_set = {ext.lower() for ext in raw_extensions}

# test values
# Source directory where photos are stored
source_dir = '/Users/andrew/Desktop/Test Folder For Images'
source_dir = '/Users/andrew/Downloads/'
if not os.path.exists(source_dir):
    print("Path not found")


def count_directories(root_directory):
    print("Function: Count Directories")
    count = 0
    for current_root, dirs, _ in os.walk(root_directory):
        count += len(dirs)
        for dir_name in dirs:
            dir_path = os.path.join(current_root, dir_name)
            directory_path_Q.put(dir_path)
            # print(f'Added Directory: {dir_path}')
    print (f'Dir count {count}')
    return count


def find_images(temp_dir):
    #print(f'Image Search Started: {temp_dir}')

    if os.path.exists(temp_dir):
        image_flag = False
        for filename in os.listdir(temp_dir):
            file_path = os.path.join(temp_dir, filename)
            if not(os.path.isdir(file_path)):
            #if os.path.isfile(file_path) and (file_path.lower() in image_extensions_set):
                if file_path.lower().endswith(tuple(image_extensions)):
                    image_data_cache.append(
                        {'filename': filename, 'path': temp_dir})
                    image_flag = True  # found at least one image
        if image_flag:
            image_directory_list.append(temp_dir)
    # print(f'Image Search Ended: {temp_dir}')

def worker_find_images():
        try:
            temp_dir = directory_path_Q.get_nowait()
        except queue.Empty:
            return # Break the loop if queue is empty
        find_images(temp_dir)
    #print("Image searching worker completed its task.")

def print_image_data_cache(image_data_cache):
    if not image_data_cache:
        print("Image data cache is empty.")
    else:
        print("Image Data Cache:")
        for idx, data in enumerate(image_data_cache, start=1):
            print("\n".join([f"Filename: {data['filename']}, Path: {data['path']}"]))


# Start background task
def start_image_search():
    with ThreadPoolExecutor(max_threads) as executor:
    # Starting a separate thread to count and queue directories
        count_directories_thread = executor.submit(count_directories, source_dir)
    # Starting worker threads to find images in parallel
        while not (directory_path_Q.empty() and count_directories_thread.done()):
            executor.submit(worker_find_images)


    print_image_data_cache(image_data_cache)
    print (f'found {len(image_data_cache)} images')
    print("Image search complete!")


# Using a thread to avoid freezing the Tkinter GUI
start_image_search()

ElapsedTime = time.time() - Starttime

print(f'Elapsed time {ElapsedTime}')
